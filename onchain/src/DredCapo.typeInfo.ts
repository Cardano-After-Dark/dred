// generated by StellarHeliosProject using Stellar heliosRollupTypeGen()
// recommended: CHECK THIS FILE INTO YOUR VERSION CONTROL SYSTEM
//   ... and keep checking in the changes as your on-chain types evolve.
//
// NOTE: this file is auto-generated; do not edit directly

import type { UplcData } from "@helios-lang/uplc";
import type {
    Address,
    AssetClass,
    DatumHash,
    MintingPolicyHash,
    PubKey,
    PubKeyHash,
    ScriptHash,
    SpendingCredential,
    StakingCredential,
    StakingValidatorHash,
    TimeRange,
    TxId,
    TxInput,
    TxOutput,
    TxOutputId,
    InlineTxOutputDatum,
    ValidatorHash,
    Value,
} from "@helios-lang/ledger";
import type { Cast } from "@helios-lang/contract-utils";
import type { 
    IntLike,
    // BytesLike,
 } from "@helios-lang/codec-utils";

 type TimeLike = IntLike;
 
        
import type {
    CapoHeliosBundle,
    CapoDelegateBundle,
    minimalData,
    HeliosScriptBundle,
    EnumTypeMeta,
    singleEnumVariantMeta,
    tagOnly,
    IntersectedEnum
} from "@donecollectively/stellar-contracts"


export type RelativeDelegateLink = {
    uutName: /*minStructField*/ string
    delegateValidatorHash: /*minStructField*/ ValidatorHash | undefined
    config: /*minStructField*/ number[]
}

export type ErgoRelativeDelegateLink = RelativeDelegateLink/*like canon-other*/
export type RelativeDelegateLinkLike = {
    uutName: /*minStructField*/ string
    delegateValidatorHash: /*minStructField*/ ValidatorHash | string | number[] | undefined
    config: /*minStructField*/ number[]
}


export type ManifestEntryType$DgDataPolicy = {
    policyLink: RelativeDelegateLink  /*minVariantField*/ ,
    idPrefix: string  /*minVariantField*/ ,
    refCount: bigint  /*minVariantField*/ 
}

export type ManifestEntryType$Ergo$DgDataPolicy = {
    policyLink: ErgoRelativeDelegateLink  /*minVariantField*/ ,
    idPrefix: string  /*minVariantField*/ ,
    refCount: bigint  /*minVariantField*/ 
}

export type ManifestEntryType$DgDataPolicyLike = {
    policyLink: RelativeDelegateLinkLike  /*minVariantField*/ ,
    idPrefix: string  /*minVariantField*/ ,
    refCount: IntLike  /*minVariantField*/ 
}


export type DelegateRoleMeta = EnumTypeMeta<
    {module: "CapoDelegateHelpers", enumName: "DelegateRole"}, {
        MintDgt: singleEnumVariantMeta<DelegateRoleMeta, "MintDgt",
            "Constr#0", "tagOnly", tagOnly, "noSpecialFlags"
        >,
        SpendDgt: singleEnumVariantMeta<DelegateRoleMeta, "SpendDgt",
            "Constr#1", "tagOnly", tagOnly, "noSpecialFlags"
        >,
        MintInvariant: singleEnumVariantMeta<DelegateRoleMeta, "MintInvariant",
            "Constr#2", "tagOnly", tagOnly, "noSpecialFlags"
        >,
        SpendInvariant: singleEnumVariantMeta<DelegateRoleMeta, "SpendInvariant",
            "Constr#3", "tagOnly", tagOnly, "noSpecialFlags"
        >,
        DgDataPolicy: singleEnumVariantMeta<DelegateRoleMeta, "DgDataPolicy",
            "Constr#4", "singletonField", /* implied wrapper { name: ... } for singleVariantField */ 
			string   , "noSpecialFlags"
        >,
        OtherNamedDgt: singleEnumVariantMeta<DelegateRoleMeta, "OtherNamedDgt",
            "Constr#5", "singletonField", /* implied wrapper { name: ... } for singleVariantField */ 
			string   , "noSpecialFlags"
        >,
        BothMintAndSpendDgt: singleEnumVariantMeta<DelegateRoleMeta, "BothMintAndSpendDgt",
            "Constr#6", "tagOnly", tagOnly, "noSpecialFlags"
        >,
        HandledByCapoOnly: singleEnumVariantMeta<DelegateRoleMeta, "HandledByCapoOnly",
            "Constr#7", "tagOnly", tagOnly, "noSpecialFlags"
        >
    }
>;


/**
 * DelegateRole enum variants
 * 
 * @remarks - expresses the essential raw data structures
 * supporting the **8 variant(s)** of the DelegateRole enum type
 * 
 * - **Note**: Stellar Contracts provides a higher-level `DelegateRoleHelper` class
 *     for generating UPLC data for this enum type
 */
export type DelegateRole = 
        | { MintDgt: tagOnly /*minEnumVariant*/ }
        | { SpendDgt: tagOnly /*minEnumVariant*/ }
        | { MintInvariant: tagOnly /*minEnumVariant*/ }
        | { SpendInvariant: tagOnly /*minEnumVariant*/ }
        | { DgDataPolicy: /* implied wrapper { name: ... } for singleVariantField */ 
			string    /*minEnumVariant*/ }
        | { OtherNamedDgt: /* implied wrapper { name: ... } for singleVariantField */ 
			string    /*minEnumVariant*/ }
        | { BothMintAndSpendDgt: tagOnly /*minEnumVariant*/ }
        | { HandledByCapoOnly: tagOnly /*minEnumVariant*/ }

export type ErgoDelegateRole = IntersectedEnum<DelegateRole/*like canon enum*/>

/**
 * DelegateRole enum variants (permissive)
 * 
 * @remarks - expresses the allowable data structure
 * for creating any of the **8 variant(s)** of the DelegateRole enum type
 * 
 * - **Note**: Stellar Contracts provides a higher-level `DelegateRoleHelper` class
 *     for generating UPLC data for this enum type
 *
 * ### Permissive Type
 * This is a permissive type that allows additional input data types, which are 
 * converted by convention to the canonical types used in the on-chain context.
 */
export type DelegateRoleLike = IntersectedEnum<
        | { MintDgt: tagOnly /*minEnumVariant*/ }
        | { SpendDgt: tagOnly /*minEnumVariant*/ }
        | { MintInvariant: tagOnly /*minEnumVariant*/ }
        | { SpendInvariant: tagOnly /*minEnumVariant*/ }
        | { DgDataPolicy: /* implied wrapper { name: ... } for singleVariantField */ 
			string    /*minEnumVariant*/ }
        | { OtherNamedDgt: /* implied wrapper { name: ... } for singleVariantField */ 
			string    /*minEnumVariant*/ }
        | { BothMintAndSpendDgt: tagOnly /*minEnumVariant*/ }
        | { HandledByCapoOnly: tagOnly /*minEnumVariant*/ }
>

export type ManifestEntryType$DelegateThreads = {
    role: DelegateRole  /*minVariantField*/ ,
    refCount: bigint  /*minVariantField*/ 
}

export type ManifestEntryType$Ergo$DelegateThreads = {
    role: ErgoDelegateRole  /*minVariantField*/ ,
    refCount: bigint  /*minVariantField*/ 
}

export type ManifestEntryType$DelegateThreadsLike = {
    role: DelegateRoleLike  /*minVariantField*/ ,
    refCount: IntLike  /*minVariantField*/ 
}


export type ManifestEntryTypeMeta = EnumTypeMeta<
    {module: "CapoHelpers", enumName: "ManifestEntryType"}, {
        NamedTokenRef: singleEnumVariantMeta<ManifestEntryTypeMeta, "NamedTokenRef",
            "Constr#0", "tagOnly", tagOnly, "noSpecialFlags"
        >,
        DgDataPolicy: singleEnumVariantMeta<ManifestEntryTypeMeta, "DgDataPolicy",
            "Constr#1", 
            "fields", ManifestEntryType$DgDataPolicy, "noSpecialFlags"
        >,
        DelegateThreads: singleEnumVariantMeta<ManifestEntryTypeMeta, "DelegateThreads",
            "Constr#2", 
            "fields", ManifestEntryType$DelegateThreads, "noSpecialFlags"
        >,
        MerkleMembership: singleEnumVariantMeta<ManifestEntryTypeMeta, "MerkleMembership",
            "Constr#3", "tagOnly", tagOnly, "noSpecialFlags"
        >,
        MerkleStateRoot: singleEnumVariantMeta<ManifestEntryTypeMeta, "MerkleStateRoot",
            "Constr#4", "tagOnly", tagOnly, "noSpecialFlags"
        >
    }
>;


/**
 * ManifestEntryType enum variants
 * 
 * @remarks - expresses the essential raw data structures
 * supporting the **5 variant(s)** of the ManifestEntryType enum type
 * 
 * - **Note**: Stellar Contracts provides a higher-level `ManifestEntryTypeHelper` class
 *     for generating UPLC data for this enum type
 */
export type ManifestEntryType = 
        | { NamedTokenRef: tagOnly /*minEnumVariant*/ }
        | { DgDataPolicy: ManifestEntryType$DgDataPolicy /*minEnumVariant*/ }
        | { DelegateThreads: ManifestEntryType$DelegateThreads /*minEnumVariant*/ }
        | { MerkleMembership: tagOnly /*minEnumVariant*/ }
        | { MerkleStateRoot: tagOnly /*minEnumVariant*/ }

export type ErgoManifestEntryType = IntersectedEnum<
        | { NamedTokenRef: tagOnly /*minEnumVariant*/ }
        | { DgDataPolicy: ManifestEntryType$Ergo$DgDataPolicy /*minEnumVariant*/ }
        | { DelegateThreads: ManifestEntryType$Ergo$DelegateThreads /*minEnumVariant*/ }
        | { MerkleMembership: tagOnly /*minEnumVariant*/ }
        | { MerkleStateRoot: tagOnly /*minEnumVariant*/ }
>

/**
 * ManifestEntryType enum variants (permissive)
 * 
 * @remarks - expresses the allowable data structure
 * for creating any of the **5 variant(s)** of the ManifestEntryType enum type
 * 
 * - **Note**: Stellar Contracts provides a higher-level `ManifestEntryTypeHelper` class
 *     for generating UPLC data for this enum type
 *
 * ### Permissive Type
 * This is a permissive type that allows additional input data types, which are 
 * converted by convention to the canonical types used in the on-chain context.
 */
export type ManifestEntryTypeLike = IntersectedEnum<
        | { NamedTokenRef: tagOnly /*minEnumVariant*/ }
        | { DgDataPolicy: ManifestEntryType$DgDataPolicyLike /*minEnumVariant*/ }
        | { DelegateThreads: ManifestEntryType$DelegateThreadsLike /*minEnumVariant*/ }
        | { MerkleMembership: tagOnly /*minEnumVariant*/ }
        | { MerkleStateRoot: tagOnly /*minEnumVariant*/ }
>

export type CapoManifestEntry = {
    entryType: /*minStructField*/ ManifestEntryType
    tokenName: /*minStructField*/ number[]
    mph: /*minStructField*/ MintingPolicyHash | undefined
}

export type ErgoCapoManifestEntry = {
    entryType: /*minStructField*/ ErgoManifestEntryType
    tokenName: /*minStructField*/ number[]
    mph: /*minStructField*/ MintingPolicyHash | undefined
}

export type CapoManifestEntryLike = {
    entryType: /*minStructField*/ ManifestEntryTypeLike
    tokenName: /*minStructField*/ number[]
    mph: /*minStructField*/ MintingPolicyHash | string | number[] | undefined
}


export type PendingDelegateAction$Add = {
    seed: TxOutputId  /*minVariantField*/ ,
    purpose: string  /*minVariantField*/ ,
    idPrefix: string  /*minVariantField*/ 
}

export type PendingDelegateAction$Ergo$Add = PendingDelegateAction$Add/*ergo like-canonical-this-variant*/
export type PendingDelegateAction$AddLike = {
    seed: TxOutputId | string  /*minVariantField*/ ,
    purpose: string  /*minVariantField*/ ,
    idPrefix: string  /*minVariantField*/ 
}


export type PendingDelegateAction$Replace = {
    seed: TxOutputId  /*minVariantField*/ ,
    purpose: string  /*minVariantField*/ ,
    idPrefix: string  /*minVariantField*/ ,
    replacesDgt: AssetClass  /*minVariantField*/ 
}

export type PendingDelegateAction$Ergo$Replace = PendingDelegateAction$Replace/*ergo like-canonical-this-variant*/
export type PendingDelegateAction$ReplaceLike = {
    seed: TxOutputId | string  /*minVariantField*/ ,
    purpose: string  /*minVariantField*/ ,
    idPrefix: string  /*minVariantField*/ ,
    replacesDgt: AssetClass | string | [string | MintingPolicyHash | number[], string | number[]] | {mph: MintingPolicyHash | string | number[], tokenName: string | number[]}  /*minVariantField*/ 
}


export type PendingDelegateActionMeta = EnumTypeMeta<
    {module: "CapoDelegateHelpers", enumName: "PendingDelegateAction"}, {
        Add: singleEnumVariantMeta<PendingDelegateActionMeta, "Add",
            "Constr#0", 
            "fields", PendingDelegateAction$Add, "isSeededActivity"
        >,
        Remove: singleEnumVariantMeta<PendingDelegateActionMeta, "Remove",
            "Constr#1", "tagOnly", tagOnly, "noSpecialFlags"
        >,
        Replace: singleEnumVariantMeta<PendingDelegateActionMeta, "Replace",
            "Constr#2", 
            "fields", PendingDelegateAction$Replace, "isSeededActivity"
        >
    }
>;


/**
 * PendingDelegateAction enum variants
 * 
 * @remarks - expresses the essential raw data structures
 * supporting the **3 variant(s)** of the PendingDelegateAction enum type
 * 
 * - **Note**: Stellar Contracts provides a higher-level `PendingDelegateActionHelper` class
 *     for generating UPLC data for this enum type
 */
export type PendingDelegateAction = 
        | { Add: PendingDelegateAction$Add /*minEnumVariant*/ }
        | { Remove: tagOnly /*minEnumVariant*/ }
        | { Replace: PendingDelegateAction$Replace /*minEnumVariant*/ }

export type ErgoPendingDelegateAction = IntersectedEnum<
        | { Add: PendingDelegateAction$Ergo$Add /*minEnumVariant*/ }
        | { Remove: tagOnly /*minEnumVariant*/ }
        | { Replace: PendingDelegateAction$Ergo$Replace /*minEnumVariant*/ }
>

/**
 * PendingDelegateAction enum variants (permissive)
 * 
 * @remarks - expresses the allowable data structure
 * for creating any of the **3 variant(s)** of the PendingDelegateAction enum type
 * 
 * - **Note**: Stellar Contracts provides a higher-level `PendingDelegateActionHelper` class
 *     for generating UPLC data for this enum type
 *
 * ### Permissive Type
 * This is a permissive type that allows additional input data types, which are 
 * converted by convention to the canonical types used in the on-chain context.
 */
export type PendingDelegateActionLike = IntersectedEnum<
        | { Add: PendingDelegateAction$AddLike /*minEnumVariant*/ }
        | { Remove: tagOnly /*minEnumVariant*/ }
        | { Replace: PendingDelegateAction$ReplaceLike /*minEnumVariant*/ }
>

export type PendingDelegateChange = {
    action: /*minStructField*/ PendingDelegateAction
    role: /*minStructField*/ DelegateRole
    dgtLink: /*minStructField*/ RelativeDelegateLink | undefined
}

export type ErgoPendingDelegateChange = {
    action: /*minStructField*/ ErgoPendingDelegateAction
    role: /*minStructField*/ ErgoDelegateRole
    dgtLink: /*minStructField*/ ErgoRelativeDelegateLink | undefined
}

export type PendingDelegateChangeLike = {
    action: /*minStructField*/ PendingDelegateActionLike
    role: /*minStructField*/ DelegateRoleLike
    dgtLink: /*minStructField*/ RelativeDelegateLinkLike | undefined
}


export type ManifestActivity$updatingEntry = {
    key: string  /*minVariantField*/ ,
    tokenName: number[]  /*minVariantField*/ 
}

export type ManifestActivity$Ergo$updatingEntry = ManifestActivity$updatingEntry/*ergo like-canonical-this-variant*/
export type ManifestActivity$updatingEntryLike = {
    key: string  /*minVariantField*/ ,
    tokenName: number[]  /*minVariantField*/ 
}


export type ManifestActivity$addingEntry = {
    key: string  /*minVariantField*/ ,
    tokenName: number[]  /*minVariantField*/ 
}

export type ManifestActivity$Ergo$addingEntry = ManifestActivity$addingEntry/*ergo like-canonical-this-variant*/
export type ManifestActivity$addingEntryLike = {
    key: string  /*minVariantField*/ ,
    tokenName: number[]  /*minVariantField*/ 
}


export type ManifestActivity$forkingThreadToken = {
    key: string  /*minVariantField*/ ,
    newThreadCount: bigint  /*minVariantField*/ 
}

export type ManifestActivity$Ergo$forkingThreadToken = ManifestActivity$forkingThreadToken/*ergo like-canonical-this-variant*/
export type ManifestActivity$forkingThreadTokenLike = {
    key: string  /*minVariantField*/ ,
    newThreadCount: IntLike  /*minVariantField*/ 
}


export type ManifestActivity$burningThreadToken = {
    key: string  /*minVariantField*/ ,
    burnedThreadCount: bigint  /*minVariantField*/ 
}

export type ManifestActivity$Ergo$burningThreadToken = ManifestActivity$burningThreadToken/*ergo like-canonical-this-variant*/
export type ManifestActivity$burningThreadTokenLike = {
    key: string  /*minVariantField*/ ,
    burnedThreadCount: IntLike  /*minVariantField*/ 
}


export type ManifestActivityMeta = EnumTypeMeta<
    {module: "CapoDelegateHelpers", enumName: "ManifestActivity"}, {
        retiringEntry: singleEnumVariantMeta<ManifestActivityMeta, "retiringEntry",
            "Constr#0", "singletonField", /* implied wrapper { key: ... } for singleVariantField */ 
			string   , "noSpecialFlags"
        >,
        updatingEntry: singleEnumVariantMeta<ManifestActivityMeta, "updatingEntry",
            "Constr#1", 
            "fields", ManifestActivity$updatingEntry, "noSpecialFlags"
        >,
        addingEntry: singleEnumVariantMeta<ManifestActivityMeta, "addingEntry",
            "Constr#2", 
            "fields", ManifestActivity$addingEntry, "noSpecialFlags"
        >,
        forkingThreadToken: singleEnumVariantMeta<ManifestActivityMeta, "forkingThreadToken",
            "Constr#3", 
            "fields", ManifestActivity$forkingThreadToken, "noSpecialFlags"
        >,
        burningThreadToken: singleEnumVariantMeta<ManifestActivityMeta, "burningThreadToken",
            "Constr#4", 
            "fields", ManifestActivity$burningThreadToken, "noSpecialFlags"
        >
    }
>;


/**
 * ManifestActivity enum variants
 * 
 * @remarks - expresses the essential raw data structures
 * supporting the **5 variant(s)** of the ManifestActivity enum type
 * 
 * - **Note**: Stellar Contracts provides a higher-level `ManifestActivityHelper` class
 *     for generating UPLC data for this enum type
 */
export type ManifestActivity = 
        | { retiringEntry: /* implied wrapper { key: ... } for singleVariantField */ 
			string    /*minEnumVariant*/ }
        | { updatingEntry: ManifestActivity$updatingEntry /*minEnumVariant*/ }
        | { addingEntry: ManifestActivity$addingEntry /*minEnumVariant*/ }
        | { forkingThreadToken: ManifestActivity$forkingThreadToken /*minEnumVariant*/ }
        | { burningThreadToken: ManifestActivity$burningThreadToken /*minEnumVariant*/ }

export type ErgoManifestActivity = IntersectedEnum<
        | { retiringEntry: /* implied wrapper { key: ... } for singleVariantField */ 
			string    /*minEnumVariant*/ }
        | { updatingEntry: ManifestActivity$Ergo$updatingEntry /*minEnumVariant*/ }
        | { addingEntry: ManifestActivity$Ergo$addingEntry /*minEnumVariant*/ }
        | { forkingThreadToken: ManifestActivity$Ergo$forkingThreadToken /*minEnumVariant*/ }
        | { burningThreadToken: ManifestActivity$Ergo$burningThreadToken /*minEnumVariant*/ }
>

/**
 * ManifestActivity enum variants (permissive)
 * 
 * @remarks - expresses the allowable data structure
 * for creating any of the **5 variant(s)** of the ManifestActivity enum type
 * 
 * - **Note**: Stellar Contracts provides a higher-level `ManifestActivityHelper` class
 *     for generating UPLC data for this enum type
 *
 * ### Permissive Type
 * This is a permissive type that allows additional input data types, which are 
 * converted by convention to the canonical types used in the on-chain context.
 */
export type ManifestActivityLike = IntersectedEnum<
        | { retiringEntry: /* implied wrapper { key: ... } for singleVariantField */ 
			string    /*minEnumVariant*/ }
        | { updatingEntry: ManifestActivity$updatingEntryLike /*minEnumVariant*/ }
        | { addingEntry: ManifestActivity$addingEntryLike /*minEnumVariant*/ }
        | { forkingThreadToken: ManifestActivity$forkingThreadTokenLike /*minEnumVariant*/ }
        | { burningThreadToken: ManifestActivity$burningThreadTokenLike /*minEnumVariant*/ }
>

export type PendingCharterChange$otherManifestChange = {
    activity: ManifestActivity  /*minVariantField*/ ,
    remainingDelegateValidations: Array<DelegateRole>  /*minVariantField*/ 
}

export type PendingCharterChange$Ergo$otherManifestChange = {
    activity: ErgoManifestActivity  /*minVariantField*/ ,
    remainingDelegateValidations: Array<ErgoDelegateRole>  /*minVariantField*/ 
}

export type PendingCharterChange$otherManifestChangeLike = {
    activity: ManifestActivityLike  /*minVariantField*/ ,
    remainingDelegateValidations: Array<DelegateRoleLike>  /*minVariantField*/ 
}


export type PendingCharterChangeMeta = EnumTypeMeta<
    {module: "CapoDelegateHelpers", enumName: "PendingCharterChange"}, {
        delegateChange: singleEnumVariantMeta<PendingCharterChangeMeta, "delegateChange",
            "Constr#0", "singletonField", /* implied wrapper { change: ... } for singleVariantField */ 
			PendingDelegateChange   , "noSpecialFlags"
        >,
        otherManifestChange: singleEnumVariantMeta<PendingCharterChangeMeta, "otherManifestChange",
            "Constr#1", 
            "fields", PendingCharterChange$otherManifestChange, "noSpecialFlags"
        >
    }
>;


/**
 * PendingCharterChange enum variants
 * 
 * @remarks - expresses the essential raw data structures
 * supporting the **2 variant(s)** of the PendingCharterChange enum type
 * 
 * - **Note**: Stellar Contracts provides a higher-level `PendingCharterChangeHelper` class
 *     for generating UPLC data for this enum type
 */
export type PendingCharterChange = 
        | { delegateChange: /* implied wrapper { change: ... } for singleVariantField */ 
			PendingDelegateChange    /*minEnumVariant*/ }
        | { otherManifestChange: PendingCharterChange$otherManifestChange /*minEnumVariant*/ }

export type ErgoPendingCharterChange = IntersectedEnum<
        | { delegateChange: /* implied wrapper { change: ... } for singleVariantField */ 
			ErgoPendingDelegateChange    /*minEnumVariant*/ }
        | { otherManifestChange: PendingCharterChange$Ergo$otherManifestChange /*minEnumVariant*/ }
>

/**
 * PendingCharterChange enum variants (permissive)
 * 
 * @remarks - expresses the allowable data structure
 * for creating any of the **2 variant(s)** of the PendingCharterChange enum type
 * 
 * - **Note**: Stellar Contracts provides a higher-level `PendingCharterChangeHelper` class
 *     for generating UPLC data for this enum type
 *
 * ### Permissive Type
 * This is a permissive type that allows additional input data types, which are 
 * converted by convention to the canonical types used in the on-chain context.
 */
export type PendingCharterChangeLike = IntersectedEnum<
        | { delegateChange: /* implied wrapper { change: ... } for singleVariantField */ 
			PendingDelegateChangeLike    /*minEnumVariant*/ }
        | { otherManifestChange: PendingCharterChange$otherManifestChangeLike /*minEnumVariant*/ }
>

export type CapoDatum$CharterData = {
    spendDelegateLink: RelativeDelegateLink  /*minVariantField*/ ,
    spendInvariants: Array<RelativeDelegateLink>  /*minVariantField*/ ,
    otherNamedDelegates: Map<string, RelativeDelegateLink>  /*minVariantField*/ ,
    mintDelegateLink: RelativeDelegateLink  /*minVariantField*/ ,
    mintInvariants: Array<RelativeDelegateLink>  /*minVariantField*/ ,
    govAuthorityLink: RelativeDelegateLink  /*minVariantField*/ ,
    manifest: Map<string, CapoManifestEntry>  /*minVariantField*/ ,
    pendingChanges: Array<PendingCharterChange>  /*minVariantField*/ 
}

export type CapoDatum$Ergo$CharterData = {
    spendDelegateLink: ErgoRelativeDelegateLink  /*minVariantField*/ ,
    spendInvariants: Array<ErgoRelativeDelegateLink>  /*minVariantField*/ ,
    otherNamedDelegates: Map<string, ErgoRelativeDelegateLink>  /*minVariantField*/ ,
    mintDelegateLink: ErgoRelativeDelegateLink  /*minVariantField*/ ,
    mintInvariants: Array<ErgoRelativeDelegateLink>  /*minVariantField*/ ,
    govAuthorityLink: ErgoRelativeDelegateLink  /*minVariantField*/ ,
    manifest: Map<string, ErgoCapoManifestEntry>  /*minVariantField*/ ,
    pendingChanges: Array<ErgoPendingCharterChange>  /*minVariantField*/ 
}

export type CapoDatum$CharterDataLike = {
    spendDelegateLink: RelativeDelegateLinkLike  /*minVariantField*/ ,
    spendInvariants: Array<RelativeDelegateLinkLike>  /*minVariantField*/ ,
    otherNamedDelegates: Map<string, RelativeDelegateLinkLike>  /*minVariantField*/ ,
    mintDelegateLink: RelativeDelegateLinkLike  /*minVariantField*/ ,
    mintInvariants: Array<RelativeDelegateLinkLike>  /*minVariantField*/ ,
    govAuthorityLink: RelativeDelegateLinkLike  /*minVariantField*/ ,
    manifest: Map<string, CapoManifestEntryLike>  /*minVariantField*/ ,
    pendingChanges: Array<PendingCharterChangeLike>  /*minVariantField*/ 
}


export type CapoDatum$DelegatedData = {
    data: Map<string, UplcData>  /*minVariantField*/ ,
    version: bigint  /*minVariantField*/ ,
    otherDetails: UplcData  /*minVariantField*/ 
}

export type CapoDatum$Ergo$DelegatedData = CapoDatum$DelegatedData/*ergo like-canonical-this-variant*/
export type CapoDatum$DelegatedDataLike = {
    data: Map<string, UplcData>  /*minVariantField*/ ,
    version: IntLike  /*minVariantField*/ ,
    otherDetails: UplcData  /*minVariantField*/ 
}


export type CapoDatumMeta = EnumTypeMeta<
    {module: "CapoHelpers", enumName: "CapoDatum"}, {
        CharterData: singleEnumVariantMeta<CapoDatumMeta, "CharterData",
            "Constr#0", 
            "fields", CapoDatum$CharterData, "noSpecialFlags"
        >,
        ScriptReference: singleEnumVariantMeta<CapoDatumMeta, "ScriptReference",
            "Constr#1", "tagOnly", tagOnly, "noSpecialFlags"
        >,
        DelegatedData: singleEnumVariantMeta<CapoDatumMeta, "DelegatedData",
            "Constr#2", 
            "fields", CapoDatum$DelegatedData, "noSpecialFlags"
        >
    }
>;


/**
 * CapoDatum enum variants
 * 
 * @remarks - expresses the essential raw data structures
 * supporting the **3 variant(s)** of the CapoDatum enum type
 * 
 * - **Note**: Stellar Contracts provides a higher-level `CapoDatumHelper` class
 *     for generating UPLC data for this enum type
 */
export type CapoDatum = 
        | { CharterData: CapoDatum$CharterData /*minEnumVariant*/ }
        | { ScriptReference: tagOnly /*minEnumVariant*/ }
        | { DelegatedData: CapoDatum$DelegatedData /*minEnumVariant*/ }

export type ErgoCapoDatum = IntersectedEnum<
        | { CharterData: CapoDatum$Ergo$CharterData /*minEnumVariant*/ }
        | { ScriptReference: tagOnly /*minEnumVariant*/ }
        | { DelegatedData: CapoDatum$Ergo$DelegatedData /*minEnumVariant*/ }
>

/**
 * CapoDatum enum variants (permissive)
 * 
 * @remarks - expresses the allowable data structure
 * for creating any of the **3 variant(s)** of the CapoDatum enum type
 * 
 * - **Note**: Stellar Contracts provides a higher-level `CapoDatumHelper` class
 *     for generating UPLC data for this enum type
 *
 * ### Permissive Type
 * This is a permissive type that allows additional input data types, which are 
 * converted by convention to the canonical types used in the on-chain context.
 */
export type CapoDatumLike = IntersectedEnum<
        | { CharterData: CapoDatum$CharterDataLike /*minEnumVariant*/ }
        | { ScriptReference: tagOnly /*minEnumVariant*/ }
        | { DelegatedData: CapoDatum$DelegatedDataLike /*minEnumVariant*/ }
>

export type CapoLifecycleActivity$CreatingDelegate = {
    seed: TxOutputId  /*minVariantField*/ ,
    purpose: string  /*minVariantField*/ 
}

export type CapoLifecycleActivity$Ergo$CreatingDelegate = CapoLifecycleActivity$CreatingDelegate/*ergo like-canonical-this-variant*/
export type CapoLifecycleActivity$CreatingDelegateLike = {
    seed: TxOutputId | string  /*minVariantField*/ ,
    purpose: string  /*minVariantField*/ 
}


export type CapoLifecycleActivity$forcingNewSpendDelegate = {
    seed: TxOutputId  /*minVariantField*/ ,
    purpose: string  /*minVariantField*/ 
}

export type CapoLifecycleActivity$Ergo$forcingNewSpendDelegate = CapoLifecycleActivity$forcingNewSpendDelegate/*ergo like-canonical-this-variant*/
export type CapoLifecycleActivity$forcingNewSpendDelegateLike = {
    seed: TxOutputId | string  /*minVariantField*/ ,
    purpose: string  /*minVariantField*/ 
}


export type CapoLifecycleActivity$forcingNewMintDelegate = {
    seed: TxOutputId  /*minVariantField*/ ,
    purpose: string  /*minVariantField*/ 
}

export type CapoLifecycleActivity$Ergo$forcingNewMintDelegate = CapoLifecycleActivity$forcingNewMintDelegate/*ergo like-canonical-this-variant*/
export type CapoLifecycleActivity$forcingNewMintDelegateLike = {
    seed: TxOutputId | string  /*minVariantField*/ ,
    purpose: string  /*minVariantField*/ 
}


export type CapoLifecycleActivityMeta = EnumTypeMeta<
    {module: "CapoDelegateHelpers", enumName: "CapoLifecycleActivity"}, {
        CreatingDelegate: singleEnumVariantMeta<CapoLifecycleActivityMeta, "CreatingDelegate",
            "Constr#0", 
            "fields", CapoLifecycleActivity$CreatingDelegate, "isSeededActivity"
        >,
        queuePendingChange: singleEnumVariantMeta<CapoLifecycleActivityMeta, "queuePendingChange",
            "Constr#1", "tagOnly", tagOnly, "noSpecialFlags"
        >,
        removePendingChange: singleEnumVariantMeta<CapoLifecycleActivityMeta, "removePendingChange",
            "Constr#2", "singletonField", /* implied wrapper { role: ... } for singleVariantField */ 
			DelegateRole   , "noSpecialFlags"
        >,
        commitPendingChanges: singleEnumVariantMeta<CapoLifecycleActivityMeta, "commitPendingChanges",
            "Constr#3", "tagOnly", tagOnly, "noSpecialFlags"
        >,
        forcingNewSpendDelegate: singleEnumVariantMeta<CapoLifecycleActivityMeta, "forcingNewSpendDelegate",
            "Constr#4", 
            "fields", CapoLifecycleActivity$forcingNewSpendDelegate, "isSeededActivity"
        >,
        forcingNewMintDelegate: singleEnumVariantMeta<CapoLifecycleActivityMeta, "forcingNewMintDelegate",
            "Constr#5", 
            "fields", CapoLifecycleActivity$forcingNewMintDelegate, "isSeededActivity"
        >,
        updatingManifest: singleEnumVariantMeta<CapoLifecycleActivityMeta, "updatingManifest",
            "Constr#6", "singletonField", /* implied wrapper { activity: ... } for singleVariantField */ 
			ManifestActivity   , "noSpecialFlags"
        >
    }
>;


/**
 * CapoLifecycleActivity enum variants
 * 
 * @remarks - expresses the essential raw data structures
 * supporting the **7 variant(s)** of the CapoLifecycleActivity enum type
 * 
 * - **Note**: Stellar Contracts provides a higher-level `CapoLifecycleActivityHelper` class
 *     for generating UPLC data for this enum type
 */
export type CapoLifecycleActivity = 
        | { CreatingDelegate: CapoLifecycleActivity$CreatingDelegate /*minEnumVariant*/ }
        | { queuePendingChange: tagOnly /*minEnumVariant*/ }
        | { removePendingChange: /* implied wrapper { role: ... } for singleVariantField */ 
			DelegateRole    /*minEnumVariant*/ }
        | { commitPendingChanges: tagOnly /*minEnumVariant*/ }
        | { forcingNewSpendDelegate: CapoLifecycleActivity$forcingNewSpendDelegate /*minEnumVariant*/ }
        | { forcingNewMintDelegate: CapoLifecycleActivity$forcingNewMintDelegate /*minEnumVariant*/ }
        | { updatingManifest: /* implied wrapper { activity: ... } for singleVariantField */ 
			ManifestActivity    /*minEnumVariant*/ }

export type ErgoCapoLifecycleActivity = IntersectedEnum<
        | { CreatingDelegate: CapoLifecycleActivity$Ergo$CreatingDelegate /*minEnumVariant*/ }
        | { queuePendingChange: tagOnly /*minEnumVariant*/ }
        | { removePendingChange: /* implied wrapper { role: ... } for singleVariantField */ 
			ErgoDelegateRole    /*minEnumVariant*/ }
        | { commitPendingChanges: tagOnly /*minEnumVariant*/ }
        | { forcingNewSpendDelegate: CapoLifecycleActivity$Ergo$forcingNewSpendDelegate /*minEnumVariant*/ }
        | { forcingNewMintDelegate: CapoLifecycleActivity$Ergo$forcingNewMintDelegate /*minEnumVariant*/ }
        | { updatingManifest: /* implied wrapper { activity: ... } for singleVariantField */ 
			ErgoManifestActivity    /*minEnumVariant*/ }
>

/**
 * CapoLifecycleActivity enum variants (permissive)
 * 
 * @remarks - expresses the allowable data structure
 * for creating any of the **7 variant(s)** of the CapoLifecycleActivity enum type
 * 
 * - **Note**: Stellar Contracts provides a higher-level `CapoLifecycleActivityHelper` class
 *     for generating UPLC data for this enum type
 *
 * ### Permissive Type
 * This is a permissive type that allows additional input data types, which are 
 * converted by convention to the canonical types used in the on-chain context.
 */
export type CapoLifecycleActivityLike = IntersectedEnum<
        | { CreatingDelegate: CapoLifecycleActivity$CreatingDelegateLike /*minEnumVariant*/ }
        | { queuePendingChange: tagOnly /*minEnumVariant*/ }
        | { removePendingChange: /* implied wrapper { role: ... } for singleVariantField */ 
			DelegateRoleLike    /*minEnumVariant*/ }
        | { commitPendingChanges: tagOnly /*minEnumVariant*/ }
        | { forcingNewSpendDelegate: CapoLifecycleActivity$forcingNewSpendDelegateLike /*minEnumVariant*/ }
        | { forcingNewMintDelegate: CapoLifecycleActivity$forcingNewMintDelegateLike /*minEnumVariant*/ }
        | { updatingManifest: /* implied wrapper { activity: ... } for singleVariantField */ 
			ManifestActivityLike    /*minEnumVariant*/ }
>

export type CapoActivityMeta = EnumTypeMeta<
    {module: "CapoHelpers", enumName: "CapoActivity"}, {
        capoLifecycleActivity: singleEnumVariantMeta<CapoActivityMeta, "capoLifecycleActivity",
            "Constr#0", "singletonField", /* implied wrapper { activity: ... } for singleVariantField */ 
			CapoLifecycleActivity   , "noSpecialFlags"
        >,
        usingAuthority: singleEnumVariantMeta<CapoActivityMeta, "usingAuthority",
            "Constr#1", "tagOnly", tagOnly, "noSpecialFlags"
        >,
        retiringRefScript: singleEnumVariantMeta<CapoActivityMeta, "retiringRefScript",
            "Constr#2", "tagOnly", tagOnly, "noSpecialFlags"
        >,
        addingSpendInvariant: singleEnumVariantMeta<CapoActivityMeta, "addingSpendInvariant",
            "Constr#3", "tagOnly", tagOnly, "noSpecialFlags"
        >,
        spendingDelegatedDatum: singleEnumVariantMeta<CapoActivityMeta, "spendingDelegatedDatum",
            "Constr#4", "tagOnly", tagOnly, "noSpecialFlags"
        >,
        updatingCharter: singleEnumVariantMeta<CapoActivityMeta, "updatingCharter",
            "Constr#5", "tagOnly", tagOnly, "noSpecialFlags"
        >
    }
>;


/**
 * CapoActivity enum variants
 * 
 * @remarks - expresses the essential raw data structures
 * supporting the **6 variant(s)** of the CapoActivity enum type
 * 
 * - **Note**: Stellar Contracts provides a higher-level `CapoActivityHelper` class
 *     for generating UPLC data for this enum type
 */
export type CapoActivity = 
        | { capoLifecycleActivity: /* implied wrapper { activity: ... } for singleVariantField */ 
			CapoLifecycleActivity    /*minEnumVariant*/ }
        | { usingAuthority: tagOnly /*minEnumVariant*/ }
        | { retiringRefScript: tagOnly /*minEnumVariant*/ }
        | { addingSpendInvariant: tagOnly /*minEnumVariant*/ }
        | { spendingDelegatedDatum: tagOnly /*minEnumVariant*/ }
        | { updatingCharter: tagOnly /*minEnumVariant*/ }

export type ErgoCapoActivity = IntersectedEnum<
        | { capoLifecycleActivity: /* implied wrapper { activity: ... } for singleVariantField */ 
			ErgoCapoLifecycleActivity    /*minEnumVariant*/ }
        | { usingAuthority: tagOnly /*minEnumVariant*/ }
        | { retiringRefScript: tagOnly /*minEnumVariant*/ }
        | { addingSpendInvariant: tagOnly /*minEnumVariant*/ }
        | { spendingDelegatedDatum: tagOnly /*minEnumVariant*/ }
        | { updatingCharter: tagOnly /*minEnumVariant*/ }
>

/**
 * CapoActivity enum variants (permissive)
 * 
 * @remarks - expresses the allowable data structure
 * for creating any of the **6 variant(s)** of the CapoActivity enum type
 * 
 * - **Note**: Stellar Contracts provides a higher-level `CapoActivityHelper` class
 *     for generating UPLC data for this enum type
 *
 * ### Permissive Type
 * This is a permissive type that allows additional input data types, which are 
 * converted by convention to the canonical types used in the on-chain context.
 */
export type CapoActivityLike = IntersectedEnum<
        | { capoLifecycleActivity: /* implied wrapper { activity: ... } for singleVariantField */ 
			CapoLifecycleActivityLike    /*minEnumVariant*/ }
        | { usingAuthority: tagOnly /*minEnumVariant*/ }
        | { retiringRefScript: tagOnly /*minEnumVariant*/ }
        | { addingSpendInvariant: tagOnly /*minEnumVariant*/ }
        | { spendingDelegatedDatum: tagOnly /*minEnumVariant*/ }
        | { updatingCharter: tagOnly /*minEnumVariant*/ }
>

export type AnyData = {
    id: /*minStructField*/ number[]
    type: /*minStructField*/ string
}

export type ErgoAnyData = AnyData/*like canon-other*/
export type AnyDataLike = {
    id: /*minStructField*/ number[]
    type: /*minStructField*/ string
}

export type minimalAnyData = minimalData<AnyDataLike>
