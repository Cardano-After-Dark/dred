{"version":3,"file":"MyCapo.hlb.mjs","sources":["../../src/MyCapo.hlb.ts"],"sourcesContent":["import {\n    mkCapoDeployment,\n    mkDelegateDeployment,\n    capoConfigurationDetails,\n    type CapoDeployedDetails,\n    CapoHeliosBundle,\n} from \"@donecollectively/stellar-contracts\";\n\n// recommended NOT to do this, as it can cause unintended side effects (see more below)\n// import ProtocolSettings from \"./settings/ProtocolSettings.hl\";\n\nexport default class MyCapoBundle extends CapoHeliosBundle {\n    preConfigured = capoConfigurationDetails;\n\n    get modules() {\n        // optional\n        return [\n            ...super.modules,\n\n            // NOTE: Recommended NOT to reference a global notion of record definition for \n            // protocol settings. Instead: make each other module define its own settings area\n            // and its abstract \"record with my own needed settings\", without being subject \n            // to all changes that may arise over time in the concrete & aggregated ProtocolSettings.\n            //\n            // Any actual dependencies on different areas of protocol settings spanning different \n            // scripts in the contract can be explicitly imported using those abstract definitions, \n            // and then they'll be explicitly subject to compilation changes when the sub-parts\n            // of settings definitions are changed.  Of course, the ProtocolSettingsController will\n            // require updating when any sub-part of the settings is changed.\n            // ProtocolSettings,\n\n            // for features from stellar tokenomics engine;\n            // FundedPurposeData,\n            // MarketSaleData,\n        ];\n    }\n}\n"],"names":[],"mappings":";;AAWA,MAAqB,qBAAqB,gBAAiB,CAAA;AAAA,EACvD,aAAgB,GAAA,wBAAA;AAAA,EAEhB,IAAI,OAAU,GAAA;AAEV,IAAO,OAAA;AAAA,MACH,GAAG,KAAM,CAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAiBb;AAAA;AAER;;;;"}