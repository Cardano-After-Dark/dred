name: Build and Verify

# This workflow handles build verification for both the main project and documentation
# It runs on all specified branches and PRs to ensure build integrity
# It does NOT deploy documentation - that's handled by deploy-nextjs-docs.yml
on:
  # Run on push events, but not when a PR is also open to avoid duplicate runs
  push:
    branches: 
      - 'main'
      - 'feature*'
      - 'dev*'
      - 'feature/**'
      - 'dev/**'
  # Run on pull requests targeting main
  pull_request:
    branches: [ main ]
  # Allow manual triggering of the workflow
  workflow_dispatch:

# We only need read permissions for this workflow since it doesn't deploy
permissions:
  contents: read

# Set up concurrency to avoid conflicting builds
concurrency:
  group: "build-${{ github.ref }}"
  cancel-in-progress: true

jobs:
  # Build and verify the main project
  build-main-project:
    name: Build Main Project
    runs-on: ubuntu-latest
    steps:
      # Check out the repository code
      - name: Checkout repository
        uses: actions/checkout@v3
      
      # Set up Node.js environment
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20
          
      # Install pnpm package manager
      - name: Install pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 9.15.4
          run_install: false
          
      # Set up caching for pnpm to speed up subsequent builds
      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - uses: actions/cache@v3
        name: Setup pnpm cache
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
          
      # Install project dependencies
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        
      # Run linting checks - continues even if there are issues
      # Shows warnings in the GitHub Actions UI but doesn't fail the build
      - name: Lint
        continue-on-error: true  # This allows the workflow to continue even if this step fails
        id: lint
        run: |
          pnpm run lint
          # If the lint command fails, output a warning but don't fail the build
          if [ $? -ne 0 ]; then
            echo "::warning::Linting issues found. Check the output for details."
          fi
        
      # Run TypeScript type checking - continues even if there are issues
      # Shows warnings in the GitHub Actions UI but doesn't fail the build
      - name: Type check
        continue-on-error: true  # This allows the workflow to continue even if this step fails 
        id: typecheck
        run: |
          npx tsc --noEmit
          # If the type check fails, output a warning but don't fail the build
          if [ $? -ne 0 ]; then
            echo "::warning::TypeScript errors found. Check the output for details."
          fi
          # Output the TypeScript version for debugging
          echo "TypeScript version:"
          npx tsc --version
        
      # Build the main project
      - name: Build project
        run: pnpm run build
        
      # Run tests - continues even if tests fail
      - name: Run tests
        continue-on-error: true  # Tests won't fail the build
        run: |
          pnpm test
          # If tests fail, output a warning but don't fail the build
          if [ $? -ne 0 ]; then
            echo "::warning::Tests failed. Check the output for details."
          fi

  # Build the client
  build-client:
    name: Build Client
    runs-on: ubuntu-latest
    steps:
      # Check out the repository code
      - name: Checkout repository
        uses: actions/checkout@v3
      
      # Set up Node.js environment
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20
          
      # Install pnpm package manager
      - name: Install pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 9.15.4
          run_install: false
          
      # Set up caching for pnpm to speed up subsequent builds
      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - uses: actions/cache@v3
        name: Setup pnpm cache
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
          
      # Install client dependencies
      - name: Install client dependencies
        run: cd src/client && pnpm install --frozen-lockfile
        
      # Build the client
      - name: Build client
        run: cd src/client && pnpm build
        
      # Verify build output exists
      - name: Verify client build output
        run: |
          if [ ! -d "src/client/dist" ]; then
            echo "::error::Client build failed to generate dist directory"
            exit 1
          else
            echo "Client build successful"
          fi

  # Build the documentation (for verification only, no deployment)
  build-docs:
    name: Verify Documentation Build
    runs-on: ubuntu-latest
    steps:
      # Check out the repository code
      - name: Checkout repository
        uses: actions/checkout@v3
      
      # Set up Node.js environment
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20
          
      # Install pnpm package manager
      - name: Install pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 9.15.4
          run_install: false
          
      # Set up caching for pnpm to speed up subsequent builds
      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - uses: actions/cache@v3
        name: Setup pnpm cache
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
          
      # Install documentation dependencies
      - name: Install docs dependencies
        run: cd docs && pnpm install --frozen-lockfile
        
      # Build the documentation (verification only, no deployment)
      - name: Build documentation
        env:
          NEXT_PUBLIC_BASE_PATH: /dred
        run: cd docs && pnpm run build

  # Prevent duplicate runs
  check-duplicate:
    name: Check for Duplicate Runs
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name == github.repository
    steps:
      - name: Cancel Previous Runs
        uses: styfle/cancel-workflow-action@0.11.0
        with:
          access_token: ${{ github.token }}

  # Send notifications if any build job fails
  notify:
    name: Notify on Failure
    needs: [build-main-project, build-client, build-docs]
    runs-on: ubuntu-latest
    if: failure()
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      
      # Prepare notification message
      - name: Send notification
        run: |
          echo "Build failed for ${{ github.repository }} on branch ${{ github.ref_name }}"
          echo "Commit: ${{ github.event.head_commit.message }}"
          echo "Author: ${{ github.event.head_commit.author.name }}"
          echo "Details: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          
      # Optional: Uncomment this section if you want email notifications
      # - name: Send email notification on failure
      #   uses: dawidd6/action-send-mail@v3
      #   with:
      #     # these secrets are already set in the repository settings        
      #     server_address: ${{ secrets.MAIL_SERVER }}
      #     server_port: ${{ secrets.MAIL_PORT }}
      #     username: ${{ secrets.MAIL_USERNAME }}
      #     password: ${{ secrets.MAIL_PASSWORD }}
      #     subject: Build Failed! ${{ github.repository }}
      #     body: |
      #       Build failed for ${{ github.repository }} on branch ${{ github.ref_name }}
      #       
      #       Commit: ${{ github.event.head_commit.message }}
      #       Author: ${{ github.event.head_commit.author.name }}
      #       
      #       Fix it here: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
      #     to: ${{ github.event.pusher.email }}
      #     from: GitHub Actions <no-reply@github.com>